#Область ОстаткиИЦеныНоменклатуры

Процедура ПолучитьИнформациюОТоваре(Переменные) Экспорт
	
	Штрихкод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "barcode", "");
	ЗначениеПоиска = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "search_value", "");
	
	УИД = "";
	Если ЗначениеЗаполнено(ЗначениеПоиска) Тогда
		МассивПодстрок = СтрРазделить(ЗначениеПоиска, "$");
		Если МассивПодстрок.Количество() = 2 Тогда
			УИД = МассивПодстрок[1];
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Штрихкод) И Не ЗначениеЗаполнено(УИД) Тогда
		Переменные.Вставить("toast", "Ошибка: не передан штрихкод или УИД");
		Возврат;
	КонецЕсли;

	// Поиск номенклатуры
	Номенклатура = Неопределено;
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		ЗапросШтрихкод = Новый Запрос;
		ЗапросШтрихкод.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
			|ИЗ
			|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
			|ГДЕ
			|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
		
		ЗапросШтрихкод.УстановитьПараметр("Штрихкод", Штрихкод);
		
		ВыборкаШтрихкод = ЗапросШтрихкод.Выполнить().Выбрать();
		Если ВыборкаШтрихкод.Следующий() Тогда
			Номенклатура = ВыборкаШтрихкод.Номенклатура;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(УИД) Тогда
		Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
		Если Номенклатура.Пустая() Или Не ЗначениеЗаполнено(Номенклатура.ВерсияДанных) Тогда
			Номенклатура = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Номенклатура = Неопределено Тогда
		ТоварПоШтрихкодуНеНайденСброситьДанные(Переменные);
		Возврат;
	КонецЕсли;

	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, 
		"Наименование, Код, Артикул, Описание, ФайлКартинки");
	
	// Получаем цену
	ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("Розничная цена");
	ЗапросЦена = Новый Запрос;
	ЗапросЦена.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|			,
		|			Номенклатура = &Номенклатура
		|				И ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних";
	
	ЗапросЦена.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросЦена.УстановитьПараметр("ВидЦены", ВидЦены);
	
	ВыборкаЦена = ЗапросЦена.Выполнить().Выбрать();
	Цена = 0;
	Если ВыборкаЦена.Следующий() Тогда
		Цена = ВыборкаЦена.Цена;
	КонецЕсли;
	
	// Получаем остатки
	ЗапросОстатки = Новый Запрос;
	ЗапросОстатки.Текст = 
		"ВЫБРАТЬ
		|	ЗапасыИПотребностиОстатки.Склад.Наименование КАК Склад,
		|	ЗапасыИПотребностиОстатки.ВНаличииОстаток КАК ВНаличииОстаток
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(
		|			,
		|			Номенклатура = &Номенклатура) КАК ЗапасыИПотребностиОстатки
		|ГДЕ
		|	ЗапасыИПотребностиОстатки.ВНаличииОстаток > 0";
	
	ЗапросОстатки.УстановитьПараметр("Номенклатура", Номенклатура);
	
	ВыборкаОстатки = ЗапросОстатки.Выполнить().Выбрать();
	
	// Получаем файлы
	ЗапросФайлы = Новый Запрос;
	ЗапросФайлы.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
		|	НоменклатураПрисоединенныеФайлы.Наименование КАК ПрисоединенныйФайлНаименование
		|ИЗ
		|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
		|ГДЕ
		|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &Номенклатура
		|	И НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления
		|	И НоменклатураПрисоединенныеФайлы.Ссылка <> &ОсновноеИзображение";
	
	ЗапросФайлы.УстановитьПараметр("Номенклатура", Номенклатура);
	ЗапросФайлы.УстановитьПараметр("ОсновноеИзображение", РеквизитыНоменклатуры.ФайлКартинки);
	
	ВыборкаФайлы = ЗапросФайлы.Выполнить().Выбрать();

	// Формируем результат
	Переменные.Вставить("product_name",    РеквизитыНоменклатуры.Наименование);
	Переменные.Вставить("price",           Цена);
	Переменные.Вставить("product_article", РеквизитыНоменклатуры.Артикул);
	Переменные.Вставить("product_code",    РеквизитыНоменклатуры.Код);
	Переменные.Вставить("html_info",       СоздатьСпойлер("Описание", РеквизитыНоменклатуры.Описание));
	Переменные.Вставить("product_image",   СформироватьJSONИзображений(РеквизитыНоменклатуры, ВыборкаФайлы));
	Переменные.Вставить("stocks",          СформироватьJSONОстатков(ВыборкаОстатки));
	
	// Очистим поля поиска
	Переменные.Вставить("barcode",         "");
	Переменные.Вставить("search_value",    "");
	
КонецПроцедуры

Процедура ТоварПоШтрихкодуНеНайденСброситьДанные(Переменные)
	
	Переменные.Вставить("toast",           "Товар по штрихкоду не найден");
	Переменные.Вставить("product_name",    "Товар по штрихкоду не найден");
	Переменные.Вставить("price",           "");
	Переменные.Вставить("product_article", "");
	Переменные.Вставить("product_code",    "");
	Переменные.Вставить("html_info",       "");
	Переменные.Вставить("product_image",   "");
	Переменные.Вставить("stocks",          "");
	
КонецПроцедуры

Функция СформироватьJSONОстатков(Выборка)
	
	МассивОстатков = Новый Массив;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Склад) Тогда
			СтруктураОстатка = Новый Структура;
			СтруктураОстатка.Вставить("warehouse", Выборка.Склад);
			СтруктураОстатка.Вставить("quantity", Выборка.ВНаличииОстаток);
			МассивОстатков.Добавить(СтруктураОстатка);
		КонецЕсли;
	КонецЦикла;

	СтруктураОстатков = Новый Структура;
	СтруктураОстатков.Вставить("layout", "^stocks_info");
	СтруктураОстатков.Вставить("tabledata", МассивОстатков);

	ПеременнаяСписка = Новый Структура;
	ПеременнаяСписка.Вставить("customtable", СтруктураОстатков);

	Возврат СериализоватьВJSON(ПеременнаяСписка);
		
КонецФункции

Функция СформироватьJSONИзображений(Реквизиты, ВыборкаФайлы)
	
	МассивДанных = Новый Массив;
	МассивФайлов = Новый Массив;
	
	// Собираем все файлы для пакетной обработки
	Если ЗначениеЗаполнено(Реквизиты.ФайлКартинки) Тогда
		МассивФайлов.Добавить(Реквизиты.ФайлКартинки);
	КонецЕсли;

	Пока ВыборкаФайлы.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаФайлы.ПрисоединенныйФайл) Тогда
			МассивФайлов.Добавить(ВыборкаФайлы.ПрисоединенныйФайл);
		КонецЕсли;
	КонецЦикла;

	// Получаем двоичные данные всех файлов одним вызовом
	Если МассивФайлов.Количество() > 0 Тогда
		ДвоичныеДанныеФайлов = РаботаСФайлами.ДвоичныеДанныеФайлов(МассивФайлов, Ложь);
		Для Каждого Файл Из МассивФайлов Цикл
			ДвоичныеДанные = ДвоичныеДанныеФайлов.Получить(Файл);
			Если ДвоичныеДанные <> Неопределено Тогда
				СтруктураДанные = Новый Структура;
				СтруктураДанные.Вставить("uid", Строка(Файл.УникальныйИдентификатор()));
				СтруктураДанные.Вставить("base64", Base64Строка(ДвоичныеДанные));
				МассивДанных.Добавить(СтруктураДанные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если МассивДанных.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;

	Возврат СериализоватьВJSON(МассивДанных);
		
КонецФункции

Функция СоздатьСпойлер(Знач Заголовок, Знач Содержимое)
	
	ШаблонHTML = "
		|<details>
		|	<summary>%1</summary>
		|	%2
		|</details>";
	
	Возврат СтрШаблон(ШаблонHTML, Заголовок, Содержимое);
		
КонецФункции

Функция СериализоватьВJSON(Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	
	Возврат ЗаписьJSON.Закрыть();
		
КонецФункции

#КонецОбласти

#Область АвторизацияПользователей

Функция ПолучитьДатаСетПользователей(Переменные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СпрПользователи.Ссылка) КАК УИД,
		|	ЕСТЬNULL(СпрПользователи.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(СпрПользователи.ПолноеИмя, """") КАК ПолноеИмя
		|ИЗ
		|	Справочник.Пользователи КАК СпрПользователи
		|ГДЕ
		|	НЕ СпрПользователи.ПометкаУдаления
		|	И НЕ СпрПользователи.Недействителен
		|
		|УПОРЯДОЧИТЬ ПО
		|	СпрПользователи.Наименование";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	МассивПользователей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("name", Выборка.Наименование);
		СтруктураЗаписи.Вставить("full_name", Выборка.ПолноеИмя);
		СтруктураЗаписи.Вставить("uid", Строка(Выборка.УИД));
		СтруктураЗаписи.Вставить("_id", Строка(Выборка.УИД));
		МассивПользователей.Добавить(СтруктураЗаписи);
	КонецЦикла;

	JSONСтрока = СериализоватьВJSON(МассивПользователей);
	Переменные.Вставить("dsUsers", JSONСтрока);
	
КонецФункции

Процедура АвторизоватьПользователя(Переменные) Экспорт
	
	ВыбранныйПользователь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "selected_user", "");
	
	Если Не ЗначениеЗаполнено(ВыбранныйПользователь) Тогда
		Переменные.Вставить("toast", "Ошибка: выберите пользователя");
		Возврат;
	КонецЕсли;
	
	// Извлекаем GUID пользователя из строки вида "Name$GUID"
	МассивПодстрок = СтрРазделить(ВыбранныйПользователь, "$");
	Если МассивПодстрок.Количество() = 2 Тогда
		ГУИДПользователя = МассивПодстрок[1];
		ИмяПользователя = МассивПодстрок[0];
		
		// Сохраняем в глобальные переменные
		Переменные.Вставить("current_user_guid", ГУИДПользователя);
		Переменные.Вставить("current_user_name", ИмяПользователя);
		Переменные.Вставить("is_authorized", "true");
		
		Переменные.Вставить("toast", "Авторизация выполнена успешно: " + ИмяПользователя);
	Иначе
		Переменные.Вставить("toast", "Ошибка: неверный формат данных пользователя");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДатаСетов

Функция ПолучитьДатаСетНоменклатуры(Переменные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СпрНоменклатура.Ссылка) КАК УИД,
		|	ЕСТЬNULL(СпрНоменклатура.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(СпрНоменклатура.Код, """") КАК Код,
		|	ЕСТЬNULL(СпрНоменклатура.Артикул, """") КАК Артикул,
		|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО СпрНоменклатура.Ссылка = ШтрихкодыНоменклатуры.Номенклатура
		|ГДЕ
		|	НЕ СпрНоменклатура.ПометкаУдаления
		|	И НЕ СпрНоменклатура.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодыНоменклатуры.Номенклатура.Наименование";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	МассивНоменклатуры = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("name", Выборка.Наименование);
		СтруктураЗаписи.Вставить("code", Выборка.Код);
		СтруктураЗаписи.Вставить("article", Выборка.Артикул);
		СтруктураЗаписи.Вставить("barcode", ?(ЗначениеЗаполнено(Выборка.Штрихкод), Выборка.Штрихкод, ""));
		СтруктураЗаписи.Вставить("uid", Строка(Выборка.УИД));
		СтруктураЗаписи.Вставить("_id", Строка(Выборка.УИД));
		МассивНоменклатуры.Добавить(СтруктураЗаписи);
	КонецЦикла;

	JSONСтрока = СериализоватьВJSON(МассивНоменклатуры);
	Переменные.Вставить("dsProducts", JSONСтрока);
	
КонецФункции 

#КонецОбласти        

#Область ПроверкаЦенников

Процедура ПолучитьИнформациюОЦенеТовара(Переменные) Экспорт
	
	Штрихкод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "barcode", "");
		
	Если Не ЗначениеЗаполнено(Штрихкод) Тогда
		Переменные.Вставить("toast", "Ошибка: не передан штрихкода");
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ШтрихкодыНоменклатуры.Номенклатура) КАК НоменклатураГУИД,
		|	ШтрихкодыНоменклатуры.Номенклатура.Наименование КАК Наименование,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК Цена,
		|	ШтрихкодыНоменклатуры.Номенклатура.Код КАК НоменклатураКод,
		|	ШтрихкодыНоменклатуры.Номенклатура.Артикул КАК НоменклатураАртикул
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ) КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ШтрихкодыНоменклатуры.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|			И (ЦеныНоменклатуры25СрезПоследних.ВидЦены = &ВидЦены)
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";

	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	Запрос.УстановитьПараметр("ВидЦены", Справочники.ВидыЦен.НайтиПоНаименованию("Розничная цена"));

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();  
	Если Не Выборка.Следующий() Тогда
		ТоварПоШтрихкодуНеНайденСброситьДанныеЦены(Переменные);        
		Возврат;
	КонецЕсли;

	СформироватьРезультатПоЦене(Выборка, Переменные);  
	
КонецПроцедуры

Процедура ТоварПоШтрихкодуНеНайденСброситьДанныеЦены(Переменные)
	
	Переменные.Вставить("toast",           "Товар по штрихкоду не найден");
	Переменные.Вставить("product_name",    "Товар по штрихкоду не найден");
	Переменные.Вставить("price",           "");
	Переменные.Вставить("product_article", "");
	Переменные.Вставить("product_code",    "");
	
КонецПроцедуры

Процедура СформироватьРезультатПоЦене(Выборка, Переменные)

    Переменные.Вставить("product_name",    Выборка.Наименование);
    Переменные.Вставить("price",           Выборка.Цена);
    Переменные.Вставить("product_article", Выборка.НоменклатураАртикул);
    Переменные.Вставить("product_code",    Выборка.НоменклатураКод);
    Переменные.Вставить("product_guid",    Строка(Выборка.НоменклатураГУИД));
	
КонецПроцедуры
	
Процедура ЗагрузитьНеверныйЦенник(Переменные) Экспорт
	
	ГУИДПользователя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "current_user_guid", "");
	ГУИДТовара = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "product_guid", "");
	ДатаПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Переменные, "check_date", ТекущаяДата());
	
	Если Не ЗначениеЗаполнено(ГУИДПользователя) ИЛИ Не ЗначениеЗаполнено(ГУИДТовара) Тогда
		Переменные.Вставить("toast", "Ошибка: не указан пользователь или товар");
		Возврат;
	КонецЕсли;
	
	Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПользователя));
	Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДТовара));
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполненоУспешно = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПроверкаЦенников");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ПроверкаЦенников.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Номенклатура = Номенклатура;
		МенеджерЗаписи.Пользователь = Пользователь;
		МенеджерЗаписи.ДатаПроверки = ДатаПроверки;
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.СтатусПроверки = "Неверный";
		МенеджерЗаписи.Комментарий = "Ценник отмечен как неверный";
					
		МенеджерЗаписи.Записать(Истина);
		ВыполненоУспешно = Истина;
		
		ЗафиксироватьТранзакцию();
		
		Переменные.Вставить("toast", "Неверный ценник зарегистрирован");
	
	Исключение
		ОтменитьТранзакцию();
		Переменные.Вставить("toast", "Ошибка при записи: " + ОписаниеОшибки());
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);	
	
КонецПроцедуры


#КонецОбласти